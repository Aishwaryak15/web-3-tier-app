# Define the CI/CD Workflow for React code
name: CI workflow for 3 tier application

# Trigger the workflow on pushes to the specified branch
on:
  push:
    branches: [ main ]
      
          

# Defining the jobs in the workflow
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
      MYSQL_DB_NAME: ${{ secrets.MYSQL_DB_NAME }}
      MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

    # Define the steps to be executed in the job
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    # configure AWS / Set up AWS CLI
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
 
    # Authenticate AWS with Docker to interact with an Amazon ECR registry
    - name: Login to Amazon ECR
      run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com


    # Setup Java environment
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
         java-version: '17'
         distribution: 'temurin'  # Choose the JDK distribution


    # Build java project
    - name: Build Java Backend
      run: |
          cd ProductManagementBackEndApp
          mvn clean package

    # Install React project dependencies
    - name: Build React Frontend
      run: |
          pwd
          ls
          cd product-management-frontend-app
          sudo npm install
          sudo npm run build

    # Build, tag, and push Backend image to Amazon ECR
    - name: Build, tag, and push Backend image to Amazon ECR
      run: |
#cd ProductManagementBackEndApp
        docker build -t product-management-backend-app ./ProductManagementBackEndApp
        docker tag product-management-backend-app:latest 920726643262.dkr.ecr.us-east-1.amazonaws.com/product-management-backend-app:latest
        docker push 920726643262.dkr.ecr.us-east-1.amazonaws.com/product-management-backend-app:latest

    # Build, tag, and push Frontend image to Amazon ECR
    - name: Build, tag, and push Frontend image to Amazon ECR
      run: |
        cd product-management-frontend-app
        docker build -t product-management-frontend-app .
        docker tag product-management-frontend-app:latest 920726643262.dkr.ecr.us-east-1.amazonaws.com/product-management-frontend-app:latest
        docker push 920726643262.dkr.ecr.us-east-1.amazonaws.com/product-management-frontend-app:latest

    

    # Building docker image     
    #  - name: Build Docker Images
    #     run: |
    #       docker build -t ${{ secrets.ECR_REGISTRY }}/ProductManagementBackEndApp:latest ./backend
    #       docker build -t ${{ secrets.ECR_REGISTRY }}/product-management-frontend-app:latest ./frontend


   
  
    # # Push Docker image to Amazon ECR
    # - name: Push Docker Images to ECR
    #     run: |
    #       docker push ${{ secrets.ECR_REGISTRY }}/produc-tmanagement-backend-app:latest
    #       docker push ${{ secrets.ECR_REGISTRY }}/product-management-frontend-app:latest


    # Deploy
    # - name: Set up kubectl
    #     uses: azure/setup-kubectl@v2
    #     with:
    #       version: '1.21.0'


    # - name: Get EKS credentials
    #   run: |
    #       aws eks update-kubeconfig --name demo --region ${{ secrets.AWS_REGION }}


    # - name: Deploy to Kubernetes
    #   run: |
    #       kubectl apply -f backend-deployment.yaml
    #       kubectl apply -f frontend-deployment.yaml
    #       kubectl apply -f database-deployment.yaml




      